/*
 * 科目：ソフトウェア演習Ⅰa
 * 学籍番号・氏名：B223330・佐藤 優太
 * 課題番号：課題6-1
 * 提出日：2022年5月31日
 * 使用コンパイラ：gcc version 11.3.0
*/


/*
  力まかせ法とBM法による文字列検索の速度比較

  @author: Yuta Sato

  @version: gcc (Homebrew GCC 11.3.0_1) 11.3.0

  % gcc -o 6-1 6-1.c
  % ./6-1 [入力ファイル名] [検索文字列]
*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <limits.h>

// エラー処理を含めたmalloc()関数
void *MyMalloc(size_t size) {
  void *p;

  if ((p = malloc(size)) == NULL) {
    perror("Memory Allocation Error");
    exit(EXIT_FAILURE);
  }

  return p;
}

// 力まかせ法による文字列検索をおこない， textに含まれるpatternの個数を調べる
void BruteForce(int filesize, char *text, char *pattern) {
  int count = 0, pattern_len = strlen(pattern);

  clock_t t1 = clock(); // 計測開始
  // 先頭から探索し， text[i, ..., i+pattern_len]とpatternが一致したらカウントアップ
  for (int i = 0; i < filesize; i++) {
    if (strncmp(text + i, pattern, pattern_len) == 0) count++;
  }
  clock_t t2 = clock(); // 計測終了

  printf("\"%s\" found %d times!\n", pattern, count);
  printf("Used CPU time: %.10f\n", (double)(t2 - t1) / CLOCKS_PER_SEC);
}

// BM法による文字列検索をおこない， textに含まれるpatternの個数を調べる
void BM(int filesize, char *text, char *pattern) {
  int count = 0, pattern_len = strlen(pattern);
  int skip[UCHAR_MAX]; // スキップテーブル

  clock_t t1 = clock(); // 計測開始

  // スキップテーブルの作成
  for (int c = 0; c < UCHAR_MAX; c++) skip[c] = pattern_len; // パターン内に存在しない場合のスキップ数
  for (int i = 0; i < pattern_len; i++) skip[pattern[i]] = pattern_len - i - 1; // パターン内に存在する場合のスキップ数(pattern内に同じ文字が複数存在する場合は後ろ側の位置に合わせる)

  int tpos = pattern_len - 1, ppos = pattern_len - 1; // tpos: テキストの比較位置， ppos: パターンの比較位置． それぞれパターンの末尾のインデックスにする
  while (tpos < filesize) {
    while (text[tpos] == pattern[ppos]) {
      // パターンの先頭の文字までテキストの文字が一致した場合
      if (ppos == 0) {
        count++;
        break;
      }

      // 比較位置を１文字前に移動
      tpos--;
      ppos--;
    }

    if (skip[text[tpos]] > pattern_len - 1 - ppos) tpos += skip[text[tpos]]; // 次回の比較位置が前回の比較開始位置よりも後ろに移動する場合はスキップテーブルに従い移動
    else tpos += pattern_len - ppos; // 前に移動してしまう場合は前回の比較開始位置から1文字だけスキップ

    ppos = pattern_len - 1;
  }

  clock_t t2 = clock(); // 計測終了

  printf("\"%s\" found %d times!\n", pattern, count);
  printf("Used CPU time: %.10f\n", (double)(t2 - t1) / CLOCKS_PER_SEC);
}


int main(int argc, char *argv[]) {
  FILE *fp;
  if ((fp = fopen(argv[1], "r")) == NULL) {
    perror("File Open Error");
    exit(EXIT_FAILURE);
  }

  // ファイルサイズを測る
  fpos_t filesize;
  fseek(fp, 0, SEEK_END);
  fgetpos(fp, &filesize);
  fseek(fp, 0L, SEEK_SET);

  // ファイル全文を読みこむ
  char *text = (char *)MyMalloc(filesize * sizeof(char));
  filesize = fread(text, sizeof(char), filesize, fp);
  fclose(fp);

  char *pattern = argv[2];

  // 力まかせ法による文字列検索
  printf("Brute Force Method:\n");
  BruteForce(filesize, text, pattern);
  printf("\n");

  // BM法による文字列検索
  printf("BM Method:\n");
  BM(filesize, text, pattern);

  free(text);

  return 0;
}


/*
実行結果:
% gcc -o 6-1 6-1.c
% ./6-1 Alice_in_Wonderland.txt Alice
Brute Force Method:
"Alice" found 395 times!
Used CPU time: 0.0010600000

BM Method:
"Alice" found 395 times!
Used CPU time: 0.0003520000


% ./6-1 Alice_in_Wonderland.txt a
Brute Force Method:
"a" found 8153 times!
Used CPU time: 0.0013260000

BM Method:
"a" found 8153 times!
Used CPU time: 0.0018770000


% ./6-1 Alice_in_Wonderland.txt aa
Brute Force Method:
"aa" found 0 times!
Used CPU time: 0.0011410000

BM Method:
"aa" found 0 times!
Used CPU time: 0.0009770000


% ./6-1 Alice_in_Wonderland.txt aaaa
Brute Force Method:
"aaaa" found 0 times!
Used CPU time: 0.0011540000

BM Method:
"aaaa" found 0 times!
Used CPU time: 0.0004860000


% ./6-1 Alice_in_Wonderland.txt aaaa
Brute Force Method:
"aaaaaaaa" found 0 times!
Used CPU time: 0.0011390000

BM Method:
"aaaaaaaa" found 0 times!
Used CPU time: 0.0002440000

速度比較の結論: 文字列が短い場合，特に1文字の場合については，力まかせ法のほうが速い．しかし，文字数が増えていくにつれてBM法の速度が上がるのに対して，力まかせ法の速度はほとんど変化していない．したがって，平均的に考えて，実用上はBM法のほうが速度が速いと言える．
*/
