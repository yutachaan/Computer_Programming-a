/*
 * 科目：ソフトウェア演習Ⅰa
 * 学籍番号・氏名：B223330・佐藤 優太
 * 課題番号：課題3-1
 * 提出日：2022年5月10日
 * 使用コンパイラ：gcc version 11.2.0
*/


#include <stdio.h>
#include <stdlib.h>


// データの特徴次元毎の平均からなる平均ベクトルを計算
double *get_mean(int ndim, double **data, int ndata) {
  // 領域確保
  double *ret;
  if ((ret = (double*)malloc(ndim * sizeof(double))) == NULL) exit(1);

  // 特徴次元ごとに平均を求める
  for (int j = 0; j < ndim; j++) {
    for (int i = 0; i < ndata; i++) ret[j] += data[i][j];
    ret[j] /= ndata;
  }

  return ret;
}

// 特徴次元間の分散共分散行列を計算
double **get_cova(int ndim, double **data, int ndata) {
  // 領域確保
  double *mean;
  if ((mean = (double*)malloc(ndim * sizeof(double))) == NULL) exit(1);

  double **ret;
  if ((ret = (double**)malloc(ndim * sizeof(double*))) == NULL) exit(1);
  for (int i = 0; i < ndim; i++) {
    if ((ret[i] = (double*)malloc(ndim * sizeof(double))) == NULL) exit(1);
  }

  // 平均を求める
  mean = get_mean(ndim, data, ndata);

  // 分散共分散行列を求める
  for (int i = 0; i < ndim; i++) {
    for (int j = 0; j < ndim; j++) {
      for (int k = 0; k < ndata; k++) {
        ret[i][j] += (data[k][i] - mean[i]) * (data[k][j] - mean[j]);
      }
      ret[i][j] /= ndata;
    }
  }

  return ret;
}


int main(int argc, char *argv[]) {
  FILE *file;
  if ((file = fopen(argv[1], "r")) == NULL) exit(1);

  // フレーム数と特徴次元数を入力
  int ndata, ndim;
  fscanf(file, "%d %d\n", &ndata, &ndim);


  // 領域確保
  double **data;
  if ((data = (double**)malloc(ndata * sizeof(double*))) == NULL) exit(1);
  for (int i = 0; i < ndata; i++) {
    if ((data[i] = (double*)malloc(ndim * sizeof(double))) == NULL) exit(1);
  }


  // データを入力
  for (int i = 0; i < ndata; i++) for (int j = 0; j < ndim; j++) {
    fscanf(file, "%lf", &data[i][j]);
  }

  fclose(file);


  // 平均ベクトルを求める
  double *mean;
  if ((mean = (double*)malloc(ndim * sizeof(double))) == NULL) exit(1);

  mean = get_mean(ndim, data, ndata);

  printf("mean vector: \n");
  for (int j = 0; j < ndim; j++) printf("%10lf\n", mean[j]);
  printf("\n");

  free(mean);


  // 分散共分散行列を求める
  double **cova;
  if ((cova = (double**)malloc(ndim * sizeof(double*))) == NULL) exit(1);
  for (int i = 0; i < ndim; i++) {
    if ((cova[i] = (double*)malloc(ndim * sizeof(double))) == NULL) exit(1);
  }

  cova = get_cova(ndim, data, ndata);

  printf("covariance matrix: \n");
  for (int i = 0; i < ndim; i++) {
    for (int j = 0; j < ndim - 1; j++) printf("%10lf ", cova[i][j]);
    printf("%10lf\n", cova[i][ndim - 1]);
  }

  for (int i = 0; i < ndim; i++) free(cova[i]);
  free(cova);


  for (int i = 0; i < ndata; i++) free(data[i]);
  free(data);
}


/*
実行結果:
% gcc -o 3-1 3-1.c
% ./3-1 A01M0007-0007.dat
mean vector: 
 -0.000014
 -0.000001
 -0.000018
 -0.000009
 -0.000012
  0.000000
 -0.000015
 -0.000000
  0.000006
 -0.000004

covariance matrix: 
 29.431324  -5.025587   2.005196 -21.295439 -15.806846   8.677714  -5.474325  -3.670951  -9.022653  -1.762498
 -5.025587  47.686228   2.810142  12.495066  16.664772  14.129448  23.788095 -16.657507 -14.308402   3.179601
  2.005196   2.810142  46.322844  21.025262 -27.958765  -5.785768 -11.688003  12.296703  -1.795753 -14.474213
-21.295439  12.495066  21.025262  86.918294  27.923627 -25.795114   9.137526   8.794512  13.922046  12.330206
-15.806846  16.664772 -27.958765  27.923627  92.341439   3.414691  22.661727  -0.295393  13.878921  32.496726
  8.677714  14.129448  -5.785768 -25.795114   3.414691  65.100650  19.774264 -22.028061 -10.369529   2.569036
 -5.474325  23.788095 -11.688003   9.137526  22.661727  19.774264  74.811341 -11.726446  -2.255973  -0.155340
 -3.670951 -16.657507  12.296703   8.794512  -0.295393 -22.028061 -11.726446  65.449316  18.735012   0.063330
 -9.022653 -14.308402  -1.795753  13.922046  13.878921 -10.369529  -2.255973  18.735012  59.501617   0.669178
 -1.762498   3.179601 -14.474213  12.330206  32.496726   2.569036  -0.155340   0.063330   0.669178  42.746026
*/
