/*
 * 科目：ソフトウェア演習Ⅰa
 * 学籍番号・氏名：B223330・佐藤 優太
 * 課題番号：課題4-2
 * 提出日：2022年5月17日
 * 使用コンパイラ：gcc version 11.2.0
*/


#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define STRLEN 256
#define HASHSIZE 8191


// ノードの定義
typedef struct list {
  char word[STRLEN];  // 単語(key)
  int count;          // 単語の出現回数
  struct list *next;  // 次の要素へのポインタ
} LIST, *LISTP;

// リストの末尾にノードを追加
void appendList(LIST **head, char *word) {
  LISTP new, p = *head, prev;

  // メモリ確保
  if ((new = (LISTP)malloc(sizeof(LIST))) == NULL) {
    perror("Memory Allocation Error");
    exit(EXIT_FAILURE);
  }

  // 値の代入
  strcpy(new->word, word);
  new->count = 1;
  new->next = NULL;

  // まだ要素が1つもないなら先頭に追加して終了
  if (p == NULL) {
    *head = new;
    return;
  }

  // 末尾までポインタを移動
  while (p != NULL) {
    // すでに登録されているならカウントアップして終了
    if (strcmp(p->word, word) == 0) {
      p->count++;
      return;
    }

    prev = p;
    p = p->next;
  }

  // 末尾の要素の次の位置に追加
  prev->next = new;
}

// リストの要素を順に表示(n: 通し番号)
void printList(LISTP p, int *n) {
  while (p != NULL) {
    printf("%d: WORD: %s, COUNT: %d\n", *n, p->word, p->count);

    p = p->next;
    (*n)++;
  }
}

// リストのメモリ解放
void freeList(LISTP p) {
  if (p == NULL) return;

  freeList(p->next);
  free(p);
}


// ハッシュ関数
int hash(char *str) {
  int h = 0;
  for (int i = 0; str[i] != '\0'; i++) {
    h = (h * 137 + str[i]) % HASHSIZE;
  }

  return h;
}

// ハッシュテーブルに値を追加
void insertHash(LIST **hash_table, char *word) {
  int h = hash(word);

  if (h >= HASHSIZE) {
    perror("Hash Value Error");
    exit(EXIT_FAILURE);
  }

  // ハッシュ値の位置のリストに追加
  appendList(&hash_table[h], word);
}

// ハッシュ表の先頭から要素を表示
void printHash(LIST **hash_table) {
  int n = 1;

  for (int i = 0; i < HASHSIZE; i++) {
    printList(hash_table[i], &n);
  }
}

// ハッシュ表のメモリ解放
void freeHash(LIST **hash_table) {
  for (int i = 0; i < HASHSIZE; i++) {
    freeList(hash_table[i]);
  }
}


// 文字列を分割してresultに格納し， 分割後の文字列の個数を返す(s: 対象文字列， separator: 区切り文字の配列， result: 結果を格納する文字列配列，)
int split(char *s, const char *separator, char **result) {
  if (s == NULL) return 0;

  int count = 0;

  // 文字列を分割してカウント
  char *p = strtok(s, separator);
  while (p != NULL) {
    result[count] = p;
    count++;

    p = strtok(NULL, separator);
  }

  return count;
}


int main(int argc, char *argv[]) {
  FILE *file;
  if ((file = fopen(argv[1], "r")) == NULL) {
    perror("File Open Error");
    exit(EXIT_FAILURE);
  }

  // ハッシュテーブルを初期化
  LISTP hash_table[HASHSIZE];
  for (int i = 0; i < HASHSIZE; i++) hash_table[i] = NULL;

  char str[STRLEN];
  while(fgets(str,sizeof(str), file) != NULL) {
    // 文字列を分割
    char *result[STRLEN];
    int count = split(str, " \n", result); // 空白と改行コードでsplit

    // 線形リストに追加
    for (int i = 0; i < count; i++) insertHash(hash_table, result[i]);
  }

  // 線形リストを順に出力
  printHash(hash_table);

  // ハッシュテーブルのメモリ解放
  freeHash(hash_table);

  fclose(file);
}


/*
実行結果:
% gcc -o 4-2 4-2.c
% ./4-2 Alice_in_Wonderland.txt | head -n 20
1: WORD: indeed!', COUNT: 6
2: WORD: say!', COUNT: 1
3: WORD: promising,, COUNT: 1
4: WORD: adding,, COUNT: 1
5: WORD: Waiting, COUNT: 1
6: WORD: "Turtle, COUNT: 1
7: WORD: you'll, COUNT: 4
8: WORD: now!, COUNT: 1
9: WORD: "There, COUNT: 2
10: WORD: more, COUNT: 37
11: WORD: age, COUNT: 2
12: WORD: we, COUNT: 15
13: WORD: mice, COUNT: 3
14: WORD: longer!', COUNT: 1
15: WORD: dive, COUNT: 1
16: WORD: now,, COUNT: 6
17: WORD: engaged, COUNT: 1
18: WORD: do,, COUNT: 7
19: WORD: MINE,', COUNT: 1
20: WORD: now., COUNT: 1

% ./4-2 Alice_in_Wonderland.txt | tail -n 20
5293: WORD: changed, COUNT: 7
5294: WORD: stupid?', COUNT: 1
5295: WORD: peeping, COUNT: 1
5296: WORD: `You've, COUNT: 1
5297: WORD: just, COUNT: 43
5298: WORD: procession, COUNT: 2
5299: WORD: roses?', COUNT: 1
5300: WORD: begin.', COUNT: 3
5301: WORD: LOVE)., COUNT: 1
5302: WORD: myself,', COUNT: 2
5303: WORD: panted, COUNT: 1
5304: WORD: `Come,, COUNT: 9
5305: WORD: changes, COUNT: 2
5306: WORD: ALICE'S, COUNT: 3
5307: WORD: like?', COUNT: 1
5308: WORD: answer,, COUNT: 1
5309: WORD: powdered, COUNT: 1
5310: WORD: recognised, COUNT: 1
5311: WORD: answer., COUNT: 1
5312: WORD: crossed, COUNT: 3
*/
