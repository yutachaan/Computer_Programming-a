/*
 * 科目：ソフトウェア演習Ⅰa
 * 学籍番号・氏名：B223330・佐藤 優太
 * 課題番号：課題5-2
 * 提出日：2022年5月24日
*/

(1) 100点

(2) 理由は大きく分けて二つある．
    一つ目は，コードからすぐにわかることはコメントしていないことである．例
    えば，GenerateTRG()関数内にはコメントを書いていないが，こ
    れは，GenerateTRG()の上の関数全体に対してのコメントが，関
    数内の処理を全て表しているからである．実際，関数内で行っている処理は，
    GenerateRand()で生成した乱数をtrgの各変数へ代入してい
    るだけである．他にも，メモリ確保やメモリ解放，ファイルのオープンとクロ
    ーズなどはコメントするまでもないため，コメントは省いた．変数について
    も，変数名からその意味が明らかであるものについてはコメントは省いた．コ
    メントが増えると読む時間も増えるため，不必要なコメントを省くことは重要
    である．
    二つ目は，プログラムそのものや関数，及び関数内の処理の塊ごとに，全体像
    をコメントしていることである．コードの冒頭には，このプログラムの概要，
    著者，コンパイラのバージョン，実行方法を示している．プログラムの概要を
    示すことで，コードそのものを読むことなく内容を把握することができる．ま
    た，バージョンを明記しておくことでバージョン違いによるミスを防ぐことが
    できる．このプログラムはコマンドライン引数を使用するため，実行方法も示
    した．各関数の上には，その関数が行う処理の全体像を，関数の引数が何を指
    し示しているのかがわかるようにコメントした．これも先ほどの理由と同様
    に，関数の中身を丁寧に読まなくても，その関数の処理の概要を知ることがで
    きるようにするためである．例えば，GenerateRand()のコメン
    トからは，関数で行われる処理，戻り値，各引数の意味が読み取れる．また，
    OutputToPS()のコメントには，引数であるpやfpが直接的に現
    れてはいないものの，引数の型から，引数pはコメント中の「リスト」を表す
    こと，及び，引数fpは「ファイル」を表すことが読み取れる．関数内の処理
    についても，例えばOutputPS()内では，「描画セットの開始」，
    「描画に用いる色の設定」というように，処理の塊ごとにコメントをすること
    で内容の理解を促進させている．
    以上の理由により，私自身はこのプログラムのコメントは100点だと判断し
    た．
